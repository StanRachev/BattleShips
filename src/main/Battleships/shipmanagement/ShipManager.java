package shipmanagement;

import board.Map;
import UI.MapPrinter;
import board.Ship;
import game.Player;
import UI.UI;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class ShipManager {

    private final Map map;
    private final ShipPlacer shipPlacer;
    MapPrinter mapPrinter;

    public ShipManager(Map map, MapPrinter mapPrinter) {
        this.map = map;
        shipPlacer = new ShipPlacer(map);
        this.mapPrinter = mapPrinter;
    }

    private static void listOfShipsToBePlaced(int size) {

        switch (size) {
            case 2 -> System.out.println("\nPlace 5x Vanguard(2 cells)");
            case 3 -> System.out.println("\nPlace 2x Triumph(3 cells)");
            case 4 -> System.out.println("\nPlace 2x Hercules(4 cells)");
            case 5 -> System.out.println("\nPlace 1x Dreadnought(5 cells)");
        }
    }

    public List<Ship> createShips(boolean shipsPlacedByPlayer, boolean isAi) {

        List<Ship> shipsList = new ArrayList<>();
        Player player = new Player();

        int[] shipPlaced;

        int row;
        int column;
        int sizeOfShip = 2;

        boolean isShip = false;
        boolean isHorizontal;

        do {
            if ((shipsList.size() == 5 || shipsList.size() == 7 || shipsList.size() == 9) && (isShip)) {
                sizeOfShip++;
            }

            // Player.Player creates ships
            if (shipsPlacedByPlayer) {
                mapPrinter.printUpdatedMap(shipsList, shipPlacer, new ShipPrinter());
                listOfShipsToBePlaced(sizeOfShip);
                shipPlaced = shipLocation(player);
            }
            // Randomly generated ships
            else {
                shipPlaced = randomShipLocation();
                shipPlacer.populateMap(shipsList, isAi);
            }

            isHorizontal = shipPlaced[0] == 1;
            row = shipPlaced[1];
            column = shipPlaced[2];
            int[] correctedOverlap = isOutsideMap(isHorizontal, row, column, sizeOfShip);
            row = correctedOverlap[0];
            column = correctedOverlap[1];
            isShip = isOverlapping(isHorizontal, row, column, sizeOfShip);

            // board.Ship is created successfully and is in the list
            if (isShip) {
                shipsList.add(new Ship(isAi, isHorizontal, sizeOfShip, row, column));
            }

            // All 10 ships are in the list
        } while (shipsList.size() != 10);

        // return list of ships
        return shipsList;
    }

    // Player.Player assigns ship position
    private int[] shipLocation(Player player) {

        int[] shipPositionRowCol = player.chooseCell();
        System.out.print("For horizontal press 1, for vertical press 2: ");
        int isHorizontalUser = UI.getChoice(2);
        return new int[]{isHorizontalUser, shipPositionRowCol[0], shipPositionRowCol[1]};
    }

    // Autogenerated ship location
    private static int[] randomShipLocation() {

        final Random random = new Random();
        int isHorizontal = 0;
        int trueFalse = random.nextInt(11);
        if (trueFalse % 2 == 0) {
            isHorizontal = 1;
        }
        return new int[]{isHorizontal, random.nextInt(10), random.nextInt(10)};
    }

    private int shipLocationOnMap(int rowOrColumn, int size) {

        rowOrColumn -= ((rowOrColumn + (size - 1)) - (map.getSize() - 1));
        return rowOrColumn;
    }
    // If ship overstep map boundaries is positioned inside pushed n positions back
    private int[] isOutsideMap(boolean isHorizontal, int row, int column, int size) {

        if (isHorizontal && (column + (size - 1) > map.getSize() - 1)) {
            column = shipLocationOnMap(column, size);
        } else if (!isHorizontal && (row + (size - 1) > map.getSize() - 1)) {
            row = shipLocationOnMap(row, size);
        }
        return new int[]{row, column};
    }

    // Checking if current ship overlaps with another ship from the list
    private boolean isOverlapping(boolean isHorizontal, int row, int column, int size) {

        if (isHorizontal) {
            for (int i = 0; i < size; i++) {
                if (map.getCellPlayer(row, column++).getShip() != null) {
                    return false;
                }
            }
        } else {
            for (int i = 0; i < size; i++) {
                if (map.getCellPlayer(row++, column).getShip() != null) {
                    return false;
                }
            }
        }
        return true;
    }
}
